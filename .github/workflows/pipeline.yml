name: Node.js CI

on:
  push:
    branches:
      - main
env:
  AWS_AKI: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SAK: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_ST: ${{secrets.AWS_SESSION_TOKEN}}
  AWS_R: ${{secrets.AWS_REGION}}
  AWS_U_ECR: ${{secrets.AWS_USER_ECR}} 
  DEPLOY_KEY: ${{secrets.DEPLOY_KEY}}

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v2

    - name: Setup Node.js 18
      uses: actions/setup-node@v2
      with:
        node-version: 18

    - name: Instalar dependências do backend
      working-directory: ./backend
      run: npm install

    - name: Executar testes do backend
      working-directory: ./backend
      run: npm run test

  frontend:
    runs-on: ubuntu-latest
    needs: backend

    steps:
    - name: Checkout código
      uses: actions/checkout@v2

    - name: Instalar dependências do frontend
      working-directory: ./frontend
      run: npm install

  configs_aws_config_build_docker_and_deploy:
    runs-on: ubuntu-latest
    needs: frontend

    steps:
    - name: Checkout código
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials for terraform
      run: aws configure set aws_access_key_id $AWS_AKI && aws configure set aws_secret_access_key $AWS_SAK && aws configure set aws_session_token $AWS_ST && aws configure set region $AWS_R
    
    - name: Configure AWS credentials for kubectl        
      run: aws ecr get-login-password --region $AWS_R | docker login --username AWS --password-stdin $AWS_U_ECR
    
    - name: Build e Push da imagem Docker do frontend
      working-directory: ./frontend
      run: |
        docker build -t restaurant-frontend . &&
        docker tag restaurant-frontend:latest $AWS_U_ECR/restaurant-frontend:latest &&
        docker push $AWS_U_ECR/restaurant-frontend:latest

    - name: Build e Push da imagem Docker do backend
      working-directory: ./backend
      run: |
        docker build -t restaurant-backend . &&
        docker tag restaurant-backend:latest $AWS_U_ECR/restaurant-backend:latest &&
        docker push $AWS_U_ECR/restaurant-backend:latest
                
    - name: Setup terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Init terraform
      working-directory: ./
      run: |
        terraform init
        
    - name: Destroy terraform
      working-directory: ./
      run: |
        terraform destroy -auto-approve

    - name: Setup SSH
      working-directory: ./
      run: |
        mkdir -p ~/.ssh
        echo "$DEPLOY_KEY" > ~/.ssh/id_rsa.pem
        chmod 600 ~/.ssh/id_rsa.pem

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible
    - name: Create terraform infrastructure
      working-directory: ./
      run: |
        terraform apply -auto-approve

    - name: Get Terraform Output
      id: terraform_output
      run: |
        INSTANCE_IP=$(terraform output -raw public_ip)
        echo "::set-output name=instance_ip::$INSTANCE_IP"
        echo "[servidores]" > ansible/inventario
        echo "$INSTANCE_IP ansible_ssh_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa.pem" >> ansible/inventario
        cd ansible
        ansible-playbook -i inventario site.yml
      shell: bash

